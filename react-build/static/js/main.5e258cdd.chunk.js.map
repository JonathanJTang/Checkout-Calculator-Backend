{"version":3,"sources":["CartItem.js","LeftPane.js","OrderButton.js","RightPane.js","App.js","serviceWorker.js","index.js"],"names":["CartItem","this","props","parentClickHandler","product","id","discount","classes","priceDiscount","priceRegular","Grid","item","Card","className","card","data-testid","container","direction","justifyContent","cardItem","style","flexGrow","name","textAlign","quantity","priceStyle","price","Decimal","times","toFixed","IconButton","color","size","aria-label","onClick","onClickHandler","bind","Component","withStyles","maxWidth","padding","margin","fontWeight","LeftPane","Box","p","spacing","cartList","map","cartItem","key","cartSubtotalCalculator","OrderButton","productId","marginTop","marginBottom","Button","variant","endIcon","icon","backgroundColor","buttonText","nameToIconMap","water","burger","RightPane","overflow","productList","toLowerCase","minWidth","minHeight","parentCheckoutClickHandler","i","apiBaseUrl","baseUrl","ontarioGSTRate","App","state","e","TypeError","alert","console","log","fetch","response","json","setState","fetchErrorHandler","find","updatedProduct","available_stock","cartItemIndex","findIndex","cartProduct","Object","assign","concat","produce","draft","filter","nonTaxedSubtotal","taxedSubtotal","taxed_item","add","AppBar","position","Toolbar","onOrderButtonClick","onCheckoutClick","onCartItemRemoveClick","calculateSubtotal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e258cdd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Decimal from \"decimal.js-light\";\n\nconst styles = {\n  card: {\n    maxWidth: 700,\n    // margin: `${theme.spacing(1)}px auto`,\n    padding: 10,\n  },\n  cardItem: {\n    margin: \"auto\",\n  },\n  priceRegular: {\n    color: \"black\",\n  },\n  priceDiscount: {\n    color: \"green\",\n    fontWeight: \"bold\",\n  },\n};\n\n/* An entry in the shopping cart. */\nclass CartItem extends Component {\n  onClickHandler() {\n    this.props.parentClickHandler(this.props.product.id);\n  }\n\n  /* Return the corresponding style className based on whether this product is discounted. */\n  priceStyle() {\n    if (this.props.product.discount > 0) {\n      return this.props.classes.priceDiscount;\n    } else {\n      return this.props.classes.priceRegular;\n    }\n  }\n\n  render() {\n    return (\n      <Grid item>\n        <Card className={this.props.classes.card} data-testid=\"cartItem\">\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid\n              item\n              className={this.props.classes.cardItem}\n              style={{ flexGrow: 4 }}\n            >\n              <strong>{this.props.product.name} </strong>\n            </Grid>\n            <Grid\n              item\n              className={this.props.classes.cardItem}\n              style={{ flexGrow: 1, textAlign: \"right\" }}\n            >\n              {this.props.product.quantity} x{\" \"}\n              <span className={this.priceStyle()}>\n                ${this.props.product.price - this.props.product.discount}\n              </span>{\" \"}\n              =\n            </Grid>\n            <Grid\n              item\n              className={this.props.classes.cardItem}\n              style={{ flexGrow: 1, textAlign: \"right\" }}\n            >\n              <span className={this.priceStyle()}>\n                ${\" \"}\n                {new Decimal(\n                  this.props.product.price - this.props.product.discount\n                )\n                  .times(this.props.product.quantity)\n                  .toFixed(2)}\n              </span>\n            </Grid>\n            <Grid\n              item\n              className={this.props.classes.cardItem}\n              style={{ flexGrow: 1, textAlign: \"right\" }}\n            >\n              <IconButton\n                color=\"secondary\"\n                size=\"small\"\n                aria-label=\"remove this item\"\n                onClick={this.onClickHandler.bind(this)}\n              >\n                <CloseIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Card>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(CartItem);\n","import React, { Component } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport CartItem from \"./CartItem\";\n\n/* The left-hand side pane of the app, displaying the cart items\n   and the total cost. */\nclass LeftPane extends Component {\n  render() {\n    return (\n      <Box id=\"leftPane\">\n        <Box id=\"checkoutItemsList\" p={2}>\n          <Grid container direction=\"column\" spacing={2}>\n            {this.props.cartList.map((cartItem) => (\n              <CartItem\n                key={cartItem.id}\n                product={cartItem}\n                parentClickHandler={this.props.parentClickHandler}\n              />\n            ))}\n          </Grid>\n        </Box>\n        <Box id=\"subtotalBar\">\n          Total after tax: ${this.props.cartSubtotalCalculator()}\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default LeftPane;\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n/* A button for ordering items, already wrapped in a grid container item\n   with centering. */\nclass OrderButton extends Component {\n  onClickHandler() {\n    this.props.parentClickHandler(this.props.productId);\n  }\n\n  render() {\n    return (\n      <Grid container style={{ marginTop: \"5px\", marginBottom: \"5px\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          endIcon={this.props.icon}\n          style={{ margin: \"auto\", backgroundColor: \"#26c6da\" }}\n          onClick={this.onClickHandler.bind(this)}\n        >\n          {this.props.buttonText}\n        </Button>\n      </Grid>\n    );\n  }\n}\n\nexport default OrderButton;\n","import React, { Component } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LocalDrinkIcon from \"@material-ui/icons/LocalDrink\";\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\n\nimport OrderButton from \"./OrderButton\";\n\n/* Map of product name (from database) to custom icons */\nconst nameToIconMap = {\n  water: <LocalDrinkIcon />,\n  burger: <FastfoodIcon />,\n};\n\n/* The right-hand side pane of the app, containing buttons for adding items to\n   the cart as well as checking out the cart. */\nclass RightPane extends Component {\n  render() {\n    return (\n      <Box id=\"rightPane\" p={1}>\n        <Box id=\"orderButtonsGroup\">\n          <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"center\"\n            overflow=\"auto\"\n            style={{ flexGrow: 1 }}\n          >\n            {this.props.productList.map((product) => (\n              <OrderButton\n                icon={\n                  nameToIconMap[product.name.toLowerCase()] ? (\n                    nameToIconMap[product.name.toLowerCase()]\n                  ) : (\n                    <AddShoppingCartIcon />\n                  )\n                }\n                productId={product.id}\n                buttonText={product.name}\n                parentClickHandler={this.props.parentClickHandler}\n                key={product.id}\n              />\n            ))}\n          </Grid>\n        </Box>\n        <Box>\n          <Grid container item>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              color=\"primary\"\n              style={{ minWidth: \"75%\", minHeight: \"40px\", margin: \"auto\" }}\n              onClick={this.props.parentCheckoutClickHandler}\n            >\n              Checkout\n            </Button>\n          </Grid>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default RightPane;\n","import React, { Component } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Decimal from \"decimal.js-light\";\nimport produce from \"immer\";\n\nimport \"./App.css\";\nimport LeftPane from \"./LeftPane\";\nimport RightPane from \"./RightPane\";\n\n// Use either the local Django server url, or the hosted server link\n// const baseUrl = \"http://127.0.0.1:8000\";\n// const baseUrl = \"https://checkoutcalculator301.herokuapp.com\";\nconst baseUrl = \"https://checkoutcalculator.fly.dev\";\n// baseUrl should NOT end with a '/' forward slash\nconst apiBaseUrl = baseUrl + \"/api\";\n\nconst ontarioGSTRate = new Decimal(0.13);\n\n/** Handles the state logic of the app */\nclass App extends Component {\n  /* Each product in productList has the following fields from the database:\n     - id: int\n     - name: string\n     - price: string representing number accurate to 2 decimal places\n     - taxed_item: boolean\n     - available_stock: int\n     - discount: string representing nonnegative number accurate to 2 decimal places\n  */\n  /* In cartList we store similar objects but with slightly different fields:\n     - id: int\n     - name: string\n     - price: string representing number accurate to 2 decimal places\n     - taxed_item: boolean\n     - discount: string representing nonnegative number accurate to 2 decimal places\n     - quantity: int of number of items in the cart\n  */\n  state = {\n    productList: [],\n    cartList: [],\n  };\n\n  fetchErrorHandler(e) {\n    if (e instanceof TypeError) {\n      // Network error or CORS misconfigured on the server\n      alert(\n        \"Sorry, could not connect to the server. Please try again, making sure the web server is online.\"\n      );\n    } else {\n      alert(\"Sorry, an error occurred. Please try again later\");\n      console.log(e);\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      /* Fetch product database from backend */\n      const response = await fetch(apiBaseUrl + \"/product-database\");\n      const productList = await response.json();\n      this.setState({\n        productList: productList,\n      });\n    } catch (e) {\n      this.fetchErrorHandler(e);\n    }\n  }\n\n  async onOrderButtonClick(id) {\n    const product = this.state.productList.find((product) => {\n      return product.id === id;\n    });\n    try {\n      // Fetch database entry for this product, to see if there are any updates\n      const response = await fetch(\n        apiBaseUrl + `/product-database/${product.id}`\n      );\n      const updatedProduct = await response.json();\n      if (updatedProduct.available_stock <= 0) {\n        // If product now out of stock\n        alert(`Sorry, product ${product.name} is out of stock`);\n      } else {\n        const cartItemIndex = this.state.cartList.findIndex((cartItem) => {\n          return cartItem.id === product.id;\n        });\n        if (cartItemIndex === -1) {\n          // The cart currently has no items of this product\n          const cartProduct = Object.assign({}, product);\n          delete cartProduct.available_stock;\n          cartProduct.quantity = 1;\n          this.setState((state) => {\n            return { cartList: state.cartList.concat(cartProduct) };\n          });\n        } else if (\n          this.state.cartList[cartItemIndex].quantity ===\n          updatedProduct.available_stock\n        ) {\n          // Can't add more of this product to the cart than the available stock\n          alert(\n            `Sorry, there are only ${product.available_stock} ${product.name} in stock`\n          );\n        } else {\n          // The cart currently has one or more items of this product\n          this.setState(produce(draft => { draft.cartList[cartItemIndex].quantity++ }));\n        }\n      }\n    } catch (e) {\n      this.fetchErrorHandler(e);\n    }\n  }\n\n  onCartItemRemoveClick(id) {\n    this.setState((state) => {\n      return {\n        cartList: state.cartList.filter((cartItem) => cartItem.id !== id),\n      };\n    });\n  }\n\n  onCheckoutClick() {\n    alert(\n      \"You have successfully checked out the items!\\nPress 'OK' to checkout the next customer\"\n    );\n    this.setState({ cartList: [] }); // Clear the cart\n  }\n\n  calculateSubtotal() {\n    // Sum up taxed items and non-taxed items separately, and apply the tax\n    // multiplier at the end to avoid decimal inaccuracies\n    let nonTaxedSubtotal = new Decimal(0);\n    let taxedSubtotal = new Decimal(0);\n    for (const cartItem of this.state.cartList) {\n      if (cartItem.taxed_item) {\n        taxedSubtotal = taxedSubtotal.add(\n          new Decimal(cartItem.price - cartItem.discount).times(\n            cartItem.quantity\n          )\n        );\n      } else {\n        nonTaxedSubtotal = nonTaxedSubtotal.add(\n          new Decimal(cartItem.price - cartItem.discount).times(\n            cartItem.quantity\n          )\n        );\n      }\n    }\n    return nonTaxedSubtotal\n      .add(taxedSubtotal.times(ontarioGSTRate.add(1)))\n      .toFixed(2);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Box>\n          <AppBar position=\"fixed\" className=\"appHeader\">\n            <Toolbar>Checkout Calculator</Toolbar>\n          </AppBar>\n          <Box>\n            <header className=\"appHeader\"></header>\n          </Box>\n          <RightPane\n            productList={this.state.productList}\n            parentClickHandler={this.onOrderButtonClick.bind(this)}\n            parentCheckoutClickHandler={this.onCheckoutClick.bind(this)}\n          ></RightPane>\n          <LeftPane\n            cartList={this.state.cartList}\n            parentClickHandler={this.onCartItemRemoveClick.bind(this)}\n            cartSubtotalCalculator={this.calculateSubtotal.bind(this)}\n          ></LeftPane>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}